{"version":3,"file":"index.js","sources":["../src/get.js","../src/hasKey.js","../src/getIn.js","../src/getKeys.js","../src/hasIn.js","../src/haveSameProps.js","../src/map.js","../src/remove.js","../src/shallowCopy.js","../src/updateIn.js","../src/removeIn.js","../src/set.js","../src/setIn.js","../src/shallowEqual.js"],"sourcesContent":["// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Get property value of given key.\n */\nconst get = (key: Key, composite: Composite): any => composite[(key: any)];\n\nexport default curry(get);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Returns true if key is included in composite's own enumerable ones,\n * or false otherwise.\n */\nconst hasKey = (key: Key, composite: Composite): boolean =>\n  Object.prototype.hasOwnProperty.call(composite, key);\n\nexport default curry(hasKey);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\nimport {isLastIndex} from \"@jumpn/utils-array\";\n\nimport get from \"./get\";\nimport hasKey from \"./hasKey\";\n\nimport type {Composite, Path} from \"./types\";\n\nconst getInRecur = (index, path, composite) => {\n  if (isLastIndex(path, index)) return get(path[index], composite);\n\n  return hasKey(path[index], composite)\n    ? getInRecur(index + 1, path, get(path[index], composite))\n    : undefined;\n};\n\n/**\n * Returns value located at the given path or undefined otherwise.\n */\nconst getIn = (path: Path, composite: Composite): any =>\n  path.length === 0 ? undefined : getInRecur(0, path, composite);\n\nexport default curry(getIn);\n","// @flow\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Get own enumerable keys.\n */\nconst getKeys = (composite: Composite): Array<Key> =>\n  Array.isArray(composite) ? [...composite.keys()] : Object.keys(composite);\n\nexport default getKeys;\n","// @flow\n\nimport isDeepEqual from \"fast-deep-equal\";\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport getIn from \"./getIn\";\n\nimport type {Composite, Path} from \"./types\";\n\n/**\n * Returns true if value located at given path is deeply equal to the one\n * specified.\n */\nconst hasIn = (path: Path, value: mixed, composite: Composite): boolean =>\n  isDeepEqual(getIn(path, composite), value);\n\nexport default curry(hasIn);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport get from \"./get\";\nimport getKeys from \"./getKeys\";\nimport hasKey from \"./hasKey\";\n\nimport type {Composite} from \"./types\";\n\n/**\n * Returns true if both composites have the same props or false otherwise.\n */\nconst haveSameProps = (c1: Composite, c2: Composite): boolean => {\n  const keys1 = getKeys(c1);\n\n  return (\n    keys1.length === getKeys(c2).length &&\n    keys1.every(k1 => hasKey(k1, c2) && get(k1, c1) === get(k1, c2))\n  );\n};\n\nexport default curry(haveSameProps);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport type {Composite, Key} from \"./types\";\n\nconst mapObject = (mapper, object) =>\n  Object.entries(object).reduce(\n    (result, [key, value]) => ({\n      ...result,\n      [key]: mapper(value, key, object)\n    }),\n    {}\n  );\n\n/**\n * Maps values of the given composite using mapper\n */\nconst map = <C: Composite>(\n  mapper: (value: any, key: Key, composite: $Supertype<C>) => any,\n  composite: C\n): $Supertype<C> =>\n  Array.isArray(composite)\n    ? composite.map(mapper)\n    : mapObject(mapper, composite);\n\nexport default curry(map);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport type {Composite, Key} from \"./types\";\n\n// $FlowFixMe: flow does not understand the following construction\nconst objectRemove = (key, {[key]: removed, ...rest}) => rest;\n\n/**\n * Returns a new composite with the result of having removed the property with\n * the given key.\n */\nconst remove = (key: Key, composite: Composite): Composite =>\n  Array.isArray(composite)\n    ? arrayRemove((key: any), 1, composite)\n    : objectRemove(key, composite);\n\nexport default curry(remove);\n","// @flow\n\nimport type {Composite} from \"./types\";\n\n/**\n * Returns a new composite with the same own enumerable props of the one given.\n */\nconst shallowCopy = <C: Composite>(composite: C): C =>\n  Array.isArray(composite) ? [...composite] : {...composite};\n\nexport default shallowCopy;\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\nimport {isLastIndex} from \"@jumpn/utils-array\";\n\nimport get from \"./get\";\nimport hasKey from \"./hasKey\";\nimport remove from \"./remove\";\nimport shallowCopy from \"./shallowCopy\";\n\nimport type {Composite, Path} from \"./types\";\n\nconst createReduceContext = composite => {\n  const origin = shallowCopy(composite);\n\n  return {origin, previous: undefined, current: origin};\n};\n\nconst createSupporting = key => (typeof key === \"number\" ? [] : {});\n\nconst copyOrCreate = (key, nextKey, current) =>\n  hasKey(key, current)\n    ? shallowCopy(get(key, current))\n    : createSupporting(nextKey);\n\nconst getNext = (path, updater, index, current) =>\n  isLastIndex(path, index)\n    ? updater(get(path[index], current))\n    : copyOrCreate(path[index], path[index + 1], current);\n\nconst set = (key, value, composite) => {\n  // eslint-disable-next-line no-param-reassign\n  composite[(key: any)] = value;\n\n  return get(key, composite);\n};\n\nconst updateSet = (path, index, value, context) => ({\n  ...context,\n  current: set(path[index], value, context.current)\n});\n\nconst updateRemove = (path, index, context) => {\n  const removed = remove(path[index], context.current);\n\n  return index === 0\n    ? {...context, current: removed, origin: removed}\n    : {\n        ...context,\n        previous: set(path[index - 1], removed, (context.previous: any))\n      };\n};\n\nconst removeAction = Symbol(\"composite.updateIn.removeAction\");\n\nconst update = (path, index, value, context) =>\n  value === removeAction\n    ? updateRemove(path, index, context)\n    : updateSet(path, index, value, context);\n\nconst getReducer = (path, updater) => (context, key, index) =>\n  update(path, index, getNext(path, updater, index, context.current), context);\n\n/**\n * Returns a new composite with the result of having updated the property value\n * at the given path with the result of the call to updater function.\n * \n * Entry removal is supported by returning `updateIn.remove` symbol on updater\n * function.\n */\nconst updateIn = (\n  path: Path,\n  updater: (prev: any) => any,\n  composite: Composite\n): Composite =>\n  path.length === 0\n    ? composite\n    : path.reduce(getReducer(path, updater), createReduceContext(composite))\n        .origin;\n\n// we are doing this way and not returning an Object.assign construction, as\n// that is not well typed (returns any)\nconst updateInCurried = curry(updateIn);\n\nupdateInCurried.remove = removeAction;\n\nexport default updateInCurried;\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport updateIn from \"./updateIn\";\n\nimport type {Composite, Path} from \"./types\";\n\nconst remove = () => updateIn.remove;\n\n/**\n * Returns a new composite with the result of having removed the property\n * located at the given path.\n * \n * (This does the same as calling **updateIn** with updater:\n * `() => updateIn.remove`)\n */\nconst removeIn = (path: Path, composite: Composite): Composite =>\n  updateIn(path, remove, composite);\n\nexport default curry(removeIn);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport shallowCopy from \"./shallowCopy\";\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Returns a new composite with the result of having updated the property with\n * the given key with the specified value.\n */\nconst set = (key: Key, value: mixed, composite: Composite): Composite => {\n  const copy = shallowCopy(composite);\n\n  copy[(key: any)] = value;\n\n  return copy;\n};\n\nexport default curry(set);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport updateIn from \"./updateIn\";\n\nimport type {Composite, Path} from \"./types\";\n\n/**\n * Returns a new composite with the result of having updated the property\n * located at the given path with the specified value.\n * \n * (This does the same as calling **updateIn** with updater: `() => value`)\n */\nconst setIn = (path: Path, value: mixed, composite: Composite): Composite =>\n  updateIn(path, () => value, composite);\n\nexport default curry(setIn);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport haveSameProps from \"./haveSameProps\";\n\nimport type {Composite} from \"./types\";\n\n// eslint-disable-next-line no-bitwise\nconst xor = (cond1, cond2) => Boolean(Number(cond1) ^ Number(cond2));\n\n/**\n * Returns true if both composites are of the same type (Array or Object) and\n * their properties are strictly equal.\n */\nconst shallowEqual = (c1: Composite, c2: Composite): boolean =>\n  c1 === c2 ||\n  (!xor(Array.isArray(c1), Array.isArray(c2)) && haveSameProps(c1, c2));\n\nexport default curry(shallowEqual);\n"],"names":["get","key","composite","curry","hasKey","Object","prototype","hasOwnProperty","call","getInRecur","index","path","isLastIndex","undefined","getIn","length","getKeys","Array","isArray","keys","_Object$keys","hasIn","value","isDeepEqual","haveSameProps","c1","c2","keys1","every","k1","mapObject","mapper","object","_Object$entries","reduce","result","map","objectRemove","rest","remove","arrayRemove","shallowCopy","createReduceContext","origin","previous","current","createSupporting","copyOrCreate","nextKey","getNext","updater","set","updateSet","context","updateRemove","removed","removeAction","_Symbol","update","getReducer","updateIn","updateInCurried","removeIn","copy","setIn","xor","cond1","cond2","Boolean","Number","shallowEqual"],"mappings":"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"}