{"version":3,"file":"send.js","sources":["../../src/handlePush.js","../../src/notifier/notify.js","../../src/notifier/notifyAll.js","../../src/notifier/find.js","../../src/createPushHandler.js","../../src/notifier/findIndex.js","../../src/notifier/remove.js","../../src/notifier/refresh.js","../../src/updateNotifiers.js","../../src/pushRequest.js","../../src/joinChannel.js","../../src/notifier/create.js","../../src/send.js"],"sourcesContent":["// @flow\n\nimport {Push} from \"phoenix\";\n\nimport type {PushHandler} from \"./types\";\n\nconst handlePush = (push: Push, handler: PushHandler<any>) =>\n  push\n    .receive(\"ok\", handler.onSucceed)\n    .receive(\"error\", handler.onError)\n    .receive(\"timeout\", handler.onTimeout);\n\nexport default handlePush;\n","// @flow\n\nimport type {Event, Notifier} from \"../types\";\n\nconst getNotifier = (handlerName, data) => observer =>\n  observer[handlerName] && observer[handlerName](data);\n\nconst getHandlerName = event => `on${event}`;\n\nconst notify = (notifier: Notifier<any>, event: Event, data: any) =>\n  notifier.observers.forEach(getNotifier(getHandlerName(event), data));\n\nexport default notify;\n","// @flow\n\nimport notify from \"./notify\";\n\nimport type {Event, Notifier} from \"../types\";\n\nconst notifyall = (notifiers: Array<Notifier<any>>, event: Event, data: any) =>\n  notifiers.forEach(notifier => notify(notifier, event, data));\n\nexport default notifyall;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"../types\";\n\nconst find = (notifiers: Array<Notifier<any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport {map} from \"@jumpn/utils-composite\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport notifierFind from \"./notifier/find\";\n\nimport type {AbsintheSocket, NotifierPushHandler, PushHandler} from \"./types\";\n\nconst createEventHandler = (absintheSocket, request) => handle => (...args) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  if (notifier) {\n    handle(absintheSocket, notifier, ...args);\n  }\n};\n\nconst createPushHandler = <Response: Object>(\n  notifierPushHandler: NotifierPushHandler<Response>,\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<any>\n): PushHandler<Response> =>\n  map(createEventHandler(absintheSocket, request), notifierPushHandler);\n\nexport default createPushHandler;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"../types\";\n\nconst findIndex = (notifiers: Array<Notifier<any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"../types\";\n\nconst remove = (notifier: Notifier<any>) => (notifiers: Array<Notifier<any>>) =>\n  arrayRemove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n\nexport default remove;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"../types\";\n\nconst refresh = (notifier: Notifier<any>) => (\n  notifiers: Array<Notifier<any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport type {AbsintheSocket, Notifier} from \"./types\";\n\ntype Notifiers = Array<Notifier<any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nimport {\n  errorsToString as gqlErrorsToString,\n  requestToCompat\n} from \"@jumpn/utils-graphql\";\n\nimport type {\n  GqlError,\n  GqlResponse\n} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport createPushHandler from \"./createPushHandler\";\nimport handlePush from \"./handlePush\";\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, Notifier, NotifierPushHandler} from \"./types\";\n\ntype SubscriptionResponse =\n  | {|subscriptionId: string|}\n  | {|errors: Array<GqlError>|};\n\nconst notifyStart = notifier => notifierNotify(notifier, \"Start\", notifier);\n\nconst onSubscriptionSucceed = (absintheSocket, notifier, {subscriptionId}) => {\n  const updatedNotifier = {...notifier, subscriptionId};\n\n  updateNotifiers(absintheSocket, notifierRefresh(updatedNotifier));\n\n  notifyStart(updatedNotifier);\n};\n\nconst abortRequest = (absintheSocket, notifier, error) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Abort\", error);\n};\n\nconst onError = (absintheSocket, notifier, errorMessage) =>\n  abortRequest(absintheSocket, notifier, new Error(errorMessage));\n\nconst onSubscriptionResponse = (absintheSocket, notifier, response) => {\n  if (response.errors) {\n    onError(absintheSocket, notifier, gqlErrorsToString(response.errors));\n  } else {\n    onSubscriptionSucceed(absintheSocket, notifier, response);\n  }\n};\n\nconst onQueryOrMutationResponse = (absintheSocket, notifier, response) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Result\", response);\n};\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotify(notifier, \"Error\", new Error(\"request: timeout\"));\n\nconst queryOrMutationHandler: NotifierPushHandler<GqlResponse<any>> = {\n  onError,\n  onTimeout,\n  onSucceed: onQueryOrMutationResponse\n};\n\nconst subcriptionHandler: NotifierPushHandler<SubscriptionResponse> = {\n  onError,\n  onTimeout,\n  onSucceed: onSubscriptionResponse\n};\n\nconst send = (absintheSocket, request, notifierPushHandler) =>\n  handlePush(\n    absintheSocket.channel.push(\"doc\", requestToCompat(request)),\n    createPushHandler(notifierPushHandler, absintheSocket, request)\n  );\n\nconst pushRequest = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any>\n) => {\n  if (notifier.operationType === \"subscription\") {\n    send(absintheSocket, notifier.request, subcriptionHandler);\n  } else {\n    notifyStart(notifier);\n    send(absintheSocket, notifier.request, queryOrMutationHandler);\n  }\n};\n\nexport default pushRequest;\n","// @flow\n\nimport handlePush from \"./handlePush\";\nimport notifierNotifyAll from \"./notifier/notifyAll\";\nimport pushRequest from \"./pushRequest\";\n\nimport type {AbsintheSocket} from \"./types\";\n\n// join Push is reused and so the handler\n// https://github.com/phoenixframework/phoenix/blob/master/assets/js/phoenix.js#L356\nconst createChannelJoinHandler = absintheSocket => ({\n  onError: (errorMessage: string) =>\n    notifierNotifyAll(\n      absintheSocket.notifiers,\n      \"Error\",\n      new Error(`channel join: ${errorMessage}`)\n    ),\n\n  onSucceed: () =>\n    absintheSocket.notifiers.forEach(notifier =>\n      pushRequest(absintheSocket, notifier)\n    ),\n\n  onTimeout: () =>\n    notifierNotifyAll(\n      absintheSocket.notifiers,\n      \"Error\",\n      new Error(\"channel join: timeout\")\n    )\n});\n\nconst joinChannel = (absintheSocket: AbsintheSocket) => {\n  handlePush(\n    absintheSocket.channel.join(),\n    createChannelJoinHandler(absintheSocket)\n  );\n\n  absintheSocket.channelJoinCreated = true;\n\n  return absintheSocket;\n};\n\nexport default joinChannel;\n","// @flow\n\nimport {getOperationType} from \"@jumpn/utils-graphql\";\n\nimport type {GqlRequest, Notifier} from \"../types\";\n\nconst create = (request: GqlRequest<any>): Notifier<*> => ({\n  request,\n  observers: [],\n  operationType: getOperationType(request.operation),\n  subscriptionId: undefined\n});\n\nexport default create;\n","// @flow\n\nimport {append} from \"@jumpn/utils-array\";\n\nimport joinChannel from \"./joinChannel\";\nimport notifierCreate from \"./notifier/create\";\nimport notifierFind from \"./notifier/find\";\nimport pushRequest from \"./pushRequest\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, GqlRequest, Notifier} from \"./types\";\n\nconst connectOrJoinChannel = absintheSocket => {\n  if (absintheSocket.phoenixSocket.isConnected()) {\n    joinChannel(absintheSocket);\n  } else {\n    // socket ignores connect calls if a connection has already been created\n    absintheSocket.phoenixSocket.connect();\n  }\n};\n\nconst sendNew = (absintheSocket, request) => {\n  const notifier = notifierCreate(request);\n\n  updateNotifiers(absintheSocket, append([notifier]));\n\n  if (absintheSocket.channelJoinCreated) {\n    pushRequest(absintheSocket, notifier);\n  } else {\n    connectOrJoinChannel(absintheSocket);\n  }\n\n  return notifier;\n};\n\n/**\n * Sends given request and returns an object (notifier) to track its progress\n * (see observe function)\n *\n * @example\n * import * as AbsintheSocket from \"@absinthe/socket\";\n *\n * const operation = `\n *   subscription userSubscription($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       name\n *     }\n *   }\n * `;\n *\n * // This example uses a subscription, but the functionallity is the same for\n * // all operation types (queries, mutations and subscriptions)\n *\n * const notifier = AbsintheSocket.send(absintheSocket, {\n *   operation,\n *   variables: {userId: 10}\n * });\n */\nconst send = (\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<*>\n): Notifier<*> =>\n  notifierFind(absintheSocket.notifiers, \"request\", request) ||\n  sendNew(absintheSocket, request);\n\nexport default send;\n"],"names":["handlePush","push","handler","receive","onSucceed","onError","onTimeout","getNotifier","handlerName","data","observer","getHandlerName","event","notify","notifier","observers","forEach","notifyall","notifiers","find","key","value","hasIn","createEventHandler","absintheSocket","request","args","notifierFind","createPushHandler","notifierPushHandler","map","findIndex","remove","arrayRemove","refresh","arrayReplace","updateNotifiers","updater","notifyStart","notifierNotify","onSubscriptionSucceed","subscriptionId","updatedNotifier","notifierRefresh","abortRequest","error","notifierRemove","errorMessage","Error","onSubscriptionResponse","response","errors","gqlErrorsToString","onQueryOrMutationResponse","queryOrMutationHandler","subcriptionHandler","send","channel","requestToCompat","pushRequest","operationType","createChannelJoinHandler","notifierNotifyAll","joinChannel","join","channelJoinCreated","create","getOperationType","operation","undefined","connectOrJoinChannel","phoenixSocket","isConnected","connect","sendNew","notifierCreate","append"],"mappings":"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"}