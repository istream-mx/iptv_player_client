{"version":3,"file":"pushRequest.js","sources":["../../src/notifier/find.js","../../src/createPushHandler.js","../../src/handlePush.js","../../src/notifier/notify.js","../../src/notifier/findIndex.js","../../src/notifier/remove.js","../../src/notifier/refresh.js","../../src/updateNotifiers.js","../../src/pushRequest.js"],"sourcesContent":["// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"../types\";\n\nconst find = (notifiers: Array<Notifier<any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport {map} from \"@jumpn/utils-composite\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport notifierFind from \"./notifier/find\";\n\nimport type {AbsintheSocket, NotifierPushHandler, PushHandler} from \"./types\";\n\nconst createEventHandler = (absintheSocket, request) => handle => (...args) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  if (notifier) {\n    handle(absintheSocket, notifier, ...args);\n  }\n};\n\nconst createPushHandler = <Response: Object>(\n  notifierPushHandler: NotifierPushHandler<Response>,\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<any>\n): PushHandler<Response> =>\n  map(createEventHandler(absintheSocket, request), notifierPushHandler);\n\nexport default createPushHandler;\n","// @flow\n\nimport {Push} from \"phoenix\";\n\nimport type {PushHandler} from \"./types\";\n\nconst handlePush = (push: Push, handler: PushHandler<any>) =>\n  push\n    .receive(\"ok\", handler.onSucceed)\n    .receive(\"error\", handler.onError)\n    .receive(\"timeout\", handler.onTimeout);\n\nexport default handlePush;\n","// @flow\n\nimport type {Event, Notifier} from \"../types\";\n\nconst getNotifier = (handlerName, data) => observer =>\n  observer[handlerName] && observer[handlerName](data);\n\nconst getHandlerName = event => `on${event}`;\n\nconst notify = (notifier: Notifier<any>, event: Event, data: any) =>\n  notifier.observers.forEach(getNotifier(getHandlerName(event), data));\n\nexport default notify;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"../types\";\n\nconst findIndex = (notifiers: Array<Notifier<any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"../types\";\n\nconst remove = (notifier: Notifier<any>) => (notifiers: Array<Notifier<any>>) =>\n  arrayRemove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n\nexport default remove;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"../types\";\n\nconst refresh = (notifier: Notifier<any>) => (\n  notifiers: Array<Notifier<any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport type {AbsintheSocket, Notifier} from \"./types\";\n\ntype Notifiers = Array<Notifier<any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nimport {\n  errorsToString as gqlErrorsToString,\n  requestToCompat\n} from \"@jumpn/utils-graphql\";\n\nimport type {\n  GqlError,\n  GqlResponse\n} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport createPushHandler from \"./createPushHandler\";\nimport handlePush from \"./handlePush\";\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, Notifier, NotifierPushHandler} from \"./types\";\n\ntype SubscriptionResponse =\n  | {|subscriptionId: string|}\n  | {|errors: Array<GqlError>|};\n\nconst notifyStart = notifier => notifierNotify(notifier, \"Start\", notifier);\n\nconst onSubscriptionSucceed = (absintheSocket, notifier, {subscriptionId}) => {\n  const updatedNotifier = {...notifier, subscriptionId};\n\n  updateNotifiers(absintheSocket, notifierRefresh(updatedNotifier));\n\n  notifyStart(updatedNotifier);\n};\n\nconst abortRequest = (absintheSocket, notifier, error) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Abort\", error);\n};\n\nconst onError = (absintheSocket, notifier, errorMessage) =>\n  abortRequest(absintheSocket, notifier, new Error(errorMessage));\n\nconst onSubscriptionResponse = (absintheSocket, notifier, response) => {\n  if (response.errors) {\n    onError(absintheSocket, notifier, gqlErrorsToString(response.errors));\n  } else {\n    onSubscriptionSucceed(absintheSocket, notifier, response);\n  }\n};\n\nconst onQueryOrMutationResponse = (absintheSocket, notifier, response) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Result\", response);\n};\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotify(notifier, \"Error\", new Error(\"request: timeout\"));\n\nconst queryOrMutationHandler: NotifierPushHandler<GqlResponse<any>> = {\n  onError,\n  onTimeout,\n  onSucceed: onQueryOrMutationResponse\n};\n\nconst subcriptionHandler: NotifierPushHandler<SubscriptionResponse> = {\n  onError,\n  onTimeout,\n  onSucceed: onSubscriptionResponse\n};\n\nconst send = (absintheSocket, request, notifierPushHandler) =>\n  handlePush(\n    absintheSocket.channel.push(\"doc\", requestToCompat(request)),\n    createPushHandler(notifierPushHandler, absintheSocket, request)\n  );\n\nconst pushRequest = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any>\n) => {\n  if (notifier.operationType === \"subscription\") {\n    send(absintheSocket, notifier.request, subcriptionHandler);\n  } else {\n    notifyStart(notifier);\n    send(absintheSocket, notifier.request, queryOrMutationHandler);\n  }\n};\n\nexport default pushRequest;\n"],"names":["find","notifiers","key","value","hasIn","createEventHandler","absintheSocket","request","args","notifier","notifierFind","createPushHandler","notifierPushHandler","map","handlePush","push","handler","receive","onSucceed","onError","onTimeout","getNotifier","handlerName","data","observer","getHandlerName","event","notify","observers","forEach","findIndex","remove","arrayRemove","refresh","arrayReplace","updateNotifiers","updater","notifyStart","notifierNotify","onSubscriptionSucceed","subscriptionId","updatedNotifier","notifierRefresh","abortRequest","error","notifierRemove","errorMessage","Error","onSubscriptionResponse","response","errors","gqlErrorsToString","onQueryOrMutationResponse","queryOrMutationHandler","subcriptionHandler","send","channel","requestToCompat","pushRequest","operationType"],"mappings":"oaAMMA,KAAO,SAACC,EAAiCC,EAAaC,uCAE1DF,EAAUD,KAAKI,sBAAOF,GAAMC,iCCExBE,mBAAqB,SAACC,EAAgBC,uCAAY,gDAAU,sCAAIC,0EAC9DC,EAAWC,KAAaJ,EAAeL,UAAW,UAAWM,GAE/DE,mBACKH,EAAgBG,UAAaD,0CAIlCG,kBAAoB,SACxBC,EACAN,EACAC,uCAEAM,mBAAIR,mBAAmBC,EAAgBC,GAAUK,gCCjB7CE,WAAa,SAACC,EAAYC,uCAC9BD,EACGE,QAAQ,KAAMD,EAAQE,WACtBD,QAAQ,QAASD,EAAQG,SACzBF,QAAQ,UAAWD,EAAQI,wCCN1BC,YAAc,SAACC,EAAaC,uCAAS,gDACzCC,EAASF,IAAgBE,EAASF,GAAaC,6BAE3CE,eAAiB,4DAAcC,iBAE/BC,OAAS,SAAClB,EAAyBiB,EAAcH,uCACrDd,EAASmB,UAAUC,QAAQR,YAAYI,eAAeC,GAAQH,iCCJ1DO,UAAY,SAAC7B,EAAiCC,EAAaC,uCAE/DF,EAAU6B,UAAU1B,sBAAOF,GAAMC,iCCA7B4B,SAAS,SAACtB,uCAA4B,SAACR,uCAC3C+B,kBAAYF,UAAU7B,EAAW,UAAWQ,EAASF,SAAU,EAAGN,4CCD9DgC,QAAU,SAACxB,uCAA4B,SAC3CR,uCAEAiC,mBACEJ,UAAU7B,EAAW,UAAWQ,EAASF,UACxCE,GACDR,4CCREkC,gBAAkB,SACtB7B,EACA8B,yCAEenC,UAAYmC,EAAQ9B,EAAeL,WAE3CK,6BCaH+B,YAAc,8CAAYC,OAAe7B,EAAU,QAASA,iBAE5D8B,sBAAwB,SAACjC,EAAgBG,SAAW+B,IAAAA,8CAClDC,cAAsBhC,GAAU+B,mCAEtBlC,EAAgBoC,QAAgBD,gBAEpCA,iBAGRE,aAAe,SAACrC,EAAgBG,EAAUmC,8CAC9BtC,EAAgBuC,SAAepC,WAEhCA,EAAU,QAASmC,iBAG9BzB,QAAU,SAACb,EAAgBG,EAAUqC,qCACzCH,aAAarC,EAAgBG,EAAU,IAAIsC,MAAMD,kBAE7CE,uBAAyB,SAAC1C,EAAgBG,EAAUwC,8BACpDA,EAASC,eACH5C,EAAgBG,EAAU0C,4BAAkBF,EAASC,+BAEvC5C,EAAgBG,EAAUwC,iBAI9CG,0BAA4B,SAAC9C,EAAgBG,EAAUwC,8CAC3C3C,EAAgBuC,SAAepC,WAEhCA,EAAU,SAAUwC,iBAG/B7B,UAAY,SAACd,EAAgBG,qCACjC6B,OAAe7B,EAAU,QAAS,IAAIsC,MAAM,mCAExCM,sEAGOD,2BAGPE,kEAGON,wBAGPO,KAAO,SAACjD,EAAgBC,EAASK,qCACrCE,WACER,EAAekD,QAAQzC,KAAK,MAAO0C,6BAAgBlD,IACnDI,kBAAkBC,EAAqBN,EAAgBC,kBAGrDmD,YAAc,SAClBpD,EACAG,8BAE+B,iBAA3BA,EAASkD,mBACNrD,EAAgBG,EAASF,QAAS+C,iCAE3B7C,QACPH,EAAgBG,EAASF,QAAS8C"}