{"version":3,"file":"unobserve.js","sources":["../../src/notifier/findIndex.js","../../src/notifier/refresh.js","../../src/notifier/unobserve.js","../../src/updateNotifiers.js","../../src/unobserve.js"],"sourcesContent":["// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"../types\";\n\nconst findIndex = (notifiers: Array<Notifier<any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"../types\";\n\nconst refresh = (notifier: Notifier<any>) => (\n  notifiers: Array<Notifier<any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport type {Notifier, Observer} from \"../types\";\n\nconst unobserve = <Result>(\n  {observers, ...rest}: Notifier<Result>,\n  observer: Observer<Result>\n) => ({\n  ...rest,\n  observers: arrayRemove(observers.indexOf(observer), 1, observers)\n});\n\nexport default unobserve;\n","// @flow\n\nimport type {AbsintheSocket, Notifier} from \"./types\";\n\ntype Notifiers = Array<Notifier<any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nimport notifierRefresh from \"./notifier/refresh\";\nimport notifierUnobserve from \"./notifier/unobserve\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, Notifier, Observer} from \"./types\";\n\n/**\n * Detaches observer from notifier\n *\n * @example\n * import * as AbsintheSocket from \"@absinthe/socket\";\n *\n * AbsintheSocket.unobserve(absintheSocket, notifier, observer);\n */\nconst unobserve = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any>,\n  observer: Observer<any>\n): AbsintheSocket => {\n  updateNotifiers(\n    absintheSocket,\n    notifierRefresh(notifierUnobserve(notifier, observer))\n  );\n\n  return absintheSocket;\n};\n\nexport default unobserve;\n"],"names":["findIndex","notifiers","key","value","hasIn","refresh","notifier","arrayReplace","request","unobserve","observer","observers","rest","arrayRemove","indexOf","updateNotifiers","absintheSocket","updater","notifierRefresh","notifierUnobserve"],"mappings":"mcAMMA,UAAY,SAACC,EAAiCC,EAAaC,uCAE/DF,EAAUD,UAAUI,sBAAOF,GAAMC,iCCA7BE,QAAU,SAACC,uCAA4B,SAC3CL,uCAEAM,mBACEP,UAAUC,EAAW,UAAWK,EAASE,UACxCF,GACDL,4CCREQ,YAAY,WAEhBC,oCADCC,IAAAA,UAAcC,+DAGZA,aACQC,kBAAYF,EAAUG,QAAQJ,GAAW,EAAGC,kCCLnDI,gBAAkB,SACtBC,EACAC,yCAEehB,UAAYgB,EAAQD,EAAef,WAE3Ce,6BCIHP,UAAY,SAChBO,EACAV,EACAI,qDAGEM,EACAE,QAAgBC,YAAkBb,EAAUI,KAGvCM"}