{"version":3,"file":"index.js","sources":["../../src/notifier/find.js","../../src/createPushHandler.js","../../src/handlePush.js","../../src/notifier/notify.js","../../src/notifier/findIndex.js","../../src/notifier/remove.js","../../src/updateNotifiers.js","../../src/cancel.js","../../src/notifier/notifyAll.js","../../src/notifier/refresh.js","../../src/pushRequest.js","../../src/joinChannel.js","../../src/create.js","../../src/notifier/observe.js","../../src/observe.js","../../src/notifier/create.js","../../src/send.js","../../src/toObservable.js","../../src/notifier/unobserve.js","../../src/unobserve.js"],"sourcesContent":["// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"../types\";\n\nconst find = (notifiers: Array<Notifier<any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport {map} from \"@jumpn/utils-composite\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport notifierFind from \"./notifier/find\";\n\nimport type {AbsintheSocket, NotifierPushHandler, PushHandler} from \"./types\";\n\nconst createEventHandler = (absintheSocket, request) => handle => (...args) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  if (notifier) {\n    handle(absintheSocket, notifier, ...args);\n  }\n};\n\nconst createPushHandler = <Response: Object>(\n  notifierPushHandler: NotifierPushHandler<Response>,\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<any>\n): PushHandler<Response> =>\n  map(createEventHandler(absintheSocket, request), notifierPushHandler);\n\nexport default createPushHandler;\n","// @flow\n\nimport {Push} from \"phoenix\";\n\nimport type {PushHandler} from \"./types\";\n\nconst handlePush = (push: Push, handler: PushHandler<any>) =>\n  push\n    .receive(\"ok\", handler.onSucceed)\n    .receive(\"error\", handler.onError)\n    .receive(\"timeout\", handler.onTimeout);\n\nexport default handlePush;\n","// @flow\n\nimport type {Event, Notifier} from \"../types\";\n\nconst getNotifier = (handlerName, data) => observer =>\n  observer[handlerName] && observer[handlerName](data);\n\nconst getHandlerName = event => `on${event}`;\n\nconst notify = (notifier: Notifier<any>, event: Event, data: any) =>\n  notifier.observers.forEach(getNotifier(getHandlerName(event), data));\n\nexport default notify;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"../types\";\n\nconst findIndex = (notifiers: Array<Notifier<any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"../types\";\n\nconst remove = (notifier: Notifier<any>) => (notifiers: Array<Notifier<any>>) =>\n  arrayRemove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n\nexport default remove;\n","// @flow\n\nimport type {AbsintheSocket, Notifier} from \"./types\";\n\ntype Notifiers = Array<Notifier<any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nimport createPushHandler from \"./createPushHandler\";\nimport handlePush from \"./handlePush\";\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, Notifier, NotifierPushHandler} from \"./types\";\n\n// TODO: improve this type\ntype UnsubscribeResponse = {};\n\nconst removeNotifiers = (absintheSocket, notifier) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Cancel\", notifier);\n};\n\nconst onError = (absintheSocket, notifier, errorMessage) => {\n  // eslint-disable-next-line no-use-before-define\n  unsubscribe(absintheSocket, notifier);\n\n  notifierNotify(notifier, \"Error\", `unsubscribe: ${errorMessage}`);\n};\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotify(notifier, \"Error\", \"unsubscribe: timeout\");\n\nconst notifierPushHandler: NotifierPushHandler<UnsubscribeResponse> = {\n  onError,\n  onTimeout,\n  onSucceed: removeNotifiers\n};\n\nconst unsubscribe = (absintheSocket, notifier) =>\n  handlePush(\n    absintheSocket.channel.push(\"unsubscribe\", {\n      subscriptionId: notifier.subscriptionId\n    }),\n    createPushHandler(notifierPushHandler, absintheSocket, notifier.request)\n  );\n\n/**\n * Cancels a notifier sending a Cancel event to all its observers and\n * unsubscribing in case it holds a subscription request\n *\n * @example\n * import * as AbsintheSocket from \"@absinthe/socket\";\n * \n * AbsintheSocket.cancel(absintheSocket, notifier);\n */\nconst cancel = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any>\n): AbsintheSocket => {\n  if (notifier.operationType === \"subscription\") {\n    unsubscribe(absintheSocket, notifier);\n  } else {\n    removeNotifiers(absintheSocket, notifier);\n  }\n\n  return absintheSocket;\n};\n\nexport default cancel;\n","// @flow\n\nimport notify from \"./notify\";\n\nimport type {Event, Notifier} from \"../types\";\n\nconst notifyall = (notifiers: Array<Notifier<any>>, event: Event, data: any) =>\n  notifiers.forEach(notifier => notify(notifier, event, data));\n\nexport default notifyall;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"../types\";\n\nconst refresh = (notifier: Notifier<any>) => (\n  notifiers: Array<Notifier<any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport {\n  errorsToString as gqlErrorsToString,\n  requestToCompat\n} from \"@jumpn/utils-graphql\";\n\nimport type {\n  GqlError,\n  GqlResponse\n} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport createPushHandler from \"./createPushHandler\";\nimport handlePush from \"./handlePush\";\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, Notifier, NotifierPushHandler} from \"./types\";\n\ntype SubscriptionResponse =\n  | {|subscriptionId: string|}\n  | {|errors: Array<GqlError>|};\n\nconst notifyStart = notifier => notifierNotify(notifier, \"Start\", notifier);\n\nconst onSubscriptionSucceed = (absintheSocket, notifier, {subscriptionId}) => {\n  const updatedNotifier = {...notifier, subscriptionId};\n\n  updateNotifiers(absintheSocket, notifierRefresh(updatedNotifier));\n\n  notifyStart(updatedNotifier);\n};\n\nconst abortRequest = (absintheSocket, notifier, error) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Abort\", error);\n};\n\nconst onError = (absintheSocket, notifier, errorMessage) =>\n  abortRequest(absintheSocket, notifier, new Error(errorMessage));\n\nconst onSubscriptionResponse = (absintheSocket, notifier, response) => {\n  if (response.errors) {\n    onError(absintheSocket, notifier, gqlErrorsToString(response.errors));\n  } else {\n    onSubscriptionSucceed(absintheSocket, notifier, response);\n  }\n};\n\nconst onQueryOrMutationResponse = (absintheSocket, notifier, response) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Result\", response);\n};\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotify(notifier, \"Error\", new Error(\"request: timeout\"));\n\nconst queryOrMutationHandler: NotifierPushHandler<GqlResponse<any>> = {\n  onError,\n  onTimeout,\n  onSucceed: onQueryOrMutationResponse\n};\n\nconst subcriptionHandler: NotifierPushHandler<SubscriptionResponse> = {\n  onError,\n  onTimeout,\n  onSucceed: onSubscriptionResponse\n};\n\nconst send = (absintheSocket, request, notifierPushHandler) =>\n  handlePush(\n    absintheSocket.channel.push(\"doc\", requestToCompat(request)),\n    createPushHandler(notifierPushHandler, absintheSocket, request)\n  );\n\nconst pushRequest = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any>\n) => {\n  if (notifier.operationType === \"subscription\") {\n    send(absintheSocket, notifier.request, subcriptionHandler);\n  } else {\n    notifyStart(notifier);\n    send(absintheSocket, notifier.request, queryOrMutationHandler);\n  }\n};\n\nexport default pushRequest;\n","// @flow\n\nimport handlePush from \"./handlePush\";\nimport notifierNotifyAll from \"./notifier/notifyAll\";\nimport pushRequest from \"./pushRequest\";\n\nimport type {AbsintheSocket} from \"./types\";\n\n// join Push is reused and so the handler\n// https://github.com/phoenixframework/phoenix/blob/master/assets/js/phoenix.js#L356\nconst createChannelJoinHandler = absintheSocket => ({\n  onError: (errorMessage: string) =>\n    notifierNotifyAll(\n      absintheSocket.notifiers,\n      \"Error\",\n      new Error(`channel join: ${errorMessage}`)\n    ),\n\n  onSucceed: () =>\n    absintheSocket.notifiers.forEach(notifier =>\n      pushRequest(absintheSocket, notifier)\n    ),\n\n  onTimeout: () =>\n    notifierNotifyAll(\n      absintheSocket.notifiers,\n      \"Error\",\n      new Error(\"channel join: timeout\")\n    )\n});\n\nconst joinChannel = (absintheSocket: AbsintheSocket) => {\n  handlePush(\n    absintheSocket.channel.join(),\n    createChannelJoinHandler(absintheSocket)\n  );\n\n  absintheSocket.channelJoinCreated = true;\n\n  return absintheSocket;\n};\n\nexport default joinChannel;\n","// @flow\n\nimport {Socket as PhoenixSocket} from \"phoenix\";\n\nimport type {Message} from \"phoenix\";\n\nimport joinChannel from \"./joinChannel\";\nimport notifierFind from \"./notifier/find\";\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, SubscriptionPayload} from \"./types\";\n\nconst createConnectionCloseError = () => new Error(\"connection: close\");\n\nconst mutationOnConnectionClose = (absintheSocket, notifier) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Abort\", createConnectionCloseError());\n};\n\nconst notifierOnConnectionClose = absintheSocket => notifier => {\n  if (notifier.operationType === \"mutation\") {\n    mutationOnConnectionClose(absintheSocket, notifier);\n  } else {\n    notifierNotify(notifier, \"Error\", createConnectionCloseError());\n  }\n};\n\nconst onConnectionClose = absintheSocket => () =>\n  absintheSocket.notifiers.forEach(notifierOnConnectionClose(absintheSocket));\n\nconst onSubscriptionData = (\n  absintheSocket: AbsintheSocket,\n  {payload}: Message<SubscriptionPayload<any>>\n) => {\n  const notifier = notifierFind(\n    absintheSocket.notifiers,\n    \"subscriptionId\",\n    payload.subscriptionId\n  );\n\n  if (notifier) {\n    notifierNotify(notifier, \"Result\", payload.result);\n  }\n};\n\nconst onMessage = absintheSocket => (response: Message<>) => {\n  if (response.event === \"subscription:data\") {\n    onSubscriptionData(absintheSocket, response);\n  }\n};\n\nconst shouldJoinChannel = absintheSocket =>\n  !absintheSocket.channelJoinCreated && absintheSocket.notifiers.length > 0;\n\nconst onConnectionOpen = absintheSocket => () => {\n  if (shouldJoinChannel(absintheSocket)) {\n    joinChannel(absintheSocket);\n  }\n};\n\nconst absintheChannelName = \"__absinthe__:control\";\n\n/**\n * Creates an Absinthe Socket using the given Phoenix Socket instance\n *\n * @example\n * import * as AbsintheSocket from \"@absinthe/socket\";\n * import {Socket as PhoenixSocket} from \"phoenix\";\n\n * const absintheSocket = AbsintheSocket.create(\n *   new PhoenixSocket(\"ws://localhost:4000/socket\")\n * );\n */\nconst create = (phoenixSocket: PhoenixSocket): AbsintheSocket => {\n  const absintheSocket: AbsintheSocket = {\n    phoenixSocket,\n    channel: phoenixSocket.channel(absintheChannelName),\n    channelJoinCreated: false,\n    notifiers: []\n  };\n\n  phoenixSocket.onOpen(onConnectionOpen(absintheSocket));\n  phoenixSocket.onMessage(onMessage(absintheSocket));\n  phoenixSocket.onClose(onConnectionClose(absintheSocket));\n\n  return absintheSocket;\n};\n\nexport default create;\n","// @flow\n\nimport type {Notifier, Observer} from \"../types\";\n\nconst observe = <Result>(\n  {observers, ...rest}: Notifier<Result>,\n  observer: Observer<Result>\n) => ({\n  ...rest,\n  observers: [...observers, observer]\n});\n\nexport default observe;\n","// @flow\n\nimport notifierObserve from \"./notifier/observe\";\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, Notifier, Observer} from \"./types\";\n\n/**\n * Observes given notifier using the provided observer\n *\n * @example\n * import AbsintheSocket from \"@absinthe/socket\"\n *\n * const logEvent = eventName => (...args) => console.log(eventName, ...args);\n *\n * const updatedNotifier = AbsintheSocket.observe(absintheSocket, notifier, {\n *   onAbort: logEvent(\"abort\"),\n *   onError: logEvent(\"error\"),\n *   onStart: logEvent(\"open\"),\n *   onResult: logEvent(\"result\")\n * });\n */\nconst observe = <Result>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result>,\n  observer: Observer<Result>\n): AbsintheSocket =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRefresh(notifierObserve(notifier, observer))\n  );\n\nexport default observe;\n","// @flow\n\nimport {getOperationType} from \"@jumpn/utils-graphql\";\n\nimport type {GqlRequest, Notifier} from \"../types\";\n\nconst create = (request: GqlRequest<any>): Notifier<*> => ({\n  request,\n  observers: [],\n  operationType: getOperationType(request.operation),\n  subscriptionId: undefined\n});\n\nexport default create;\n","// @flow\n\nimport {append} from \"@jumpn/utils-array\";\n\nimport joinChannel from \"./joinChannel\";\nimport notifierCreate from \"./notifier/create\";\nimport notifierFind from \"./notifier/find\";\nimport pushRequest from \"./pushRequest\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, GqlRequest, Notifier} from \"./types\";\n\nconst connectOrJoinChannel = absintheSocket => {\n  if (absintheSocket.phoenixSocket.isConnected()) {\n    joinChannel(absintheSocket);\n  } else {\n    // socket ignores connect calls if a connection has already been created\n    absintheSocket.phoenixSocket.connect();\n  }\n};\n\nconst sendNew = (absintheSocket, request) => {\n  const notifier = notifierCreate(request);\n\n  updateNotifiers(absintheSocket, append([notifier]));\n\n  if (absintheSocket.channelJoinCreated) {\n    pushRequest(absintheSocket, notifier);\n  } else {\n    connectOrJoinChannel(absintheSocket);\n  }\n\n  return notifier;\n};\n\n/**\n * Sends given request and returns an object (notifier) to track its progress\n * (see observe function)\n *\n * @example\n * import * as AbsintheSocket from \"@absinthe/socket\";\n *\n * const operation = `\n *   subscription userSubscription($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       name\n *     }\n *   }\n * `;\n *\n * // This example uses a subscription, but the functionallity is the same for\n * // all operation types (queries, mutations and subscriptions)\n *\n * const notifier = AbsintheSocket.send(absintheSocket, {\n *   operation,\n *   variables: {userId: 10}\n * });\n */\nconst send = (\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<*>\n): Notifier<*> =>\n  notifierFind(absintheSocket.notifiers, \"request\", request) ||\n  sendNew(absintheSocket, request);\n\nexport default send;\n","// @flow\n\nimport Observable from \"zen-observable\";\n\nimport observe from \"./observe\";\n\nimport type {AbsintheSocket, Notifier, Observer} from \"./types\";\n\ntype Options<Result> = {\n  unsubscribe: () => void,\n  onError: $PropertyType<Observer<Result>, \"onError\">,\n  onStart: $PropertyType<Observer<Result>, \"onStart\">\n};\n\nconst onResult = (notifier, observer) => result => {\n  observer.next(result);\n\n  if (notifier.operationType !== \"subscription\") {\n    observer.complete();\n  }\n};\n\n/**\n * Creates an Observable that will follow the given notifier\n *\n * @param {AbsintheSocket} absintheSocket\n * @param {Notifier<Result>} notifier\n * @param {Object} [options]\n * @param {function(error: Error): undefined} [options.onError]\n * @param {function(notifier: Notifier<Result>): undefined} [options.onStart]\n * @param {function(): undefined} [options.unsubscribe]\n *\n * @return {Observable}\n */\nconst toObservable = <Result>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result>,\n  {onError, onStart, unsubscribe}: $Shape<Options<Result>> = {}\n) =>\n  new Observable(observer => {\n    observe(absintheSocket, notifier, {\n      onError,\n      onStart,\n      onAbort: observer.error,\n      onResult: onResult(notifier, observer)\n    });\n\n    return unsubscribe;\n  });\n\nexport default toObservable;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport type {Notifier, Observer} from \"../types\";\n\nconst unobserve = <Result>(\n  {observers, ...rest}: Notifier<Result>,\n  observer: Observer<Result>\n) => ({\n  ...rest,\n  observers: arrayRemove(observers.indexOf(observer), 1, observers)\n});\n\nexport default unobserve;\n","// @flow\n\nimport notifierRefresh from \"./notifier/refresh\";\nimport notifierUnobserve from \"./notifier/unobserve\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, Notifier, Observer} from \"./types\";\n\n/**\n * Detaches observer from notifier\n *\n * @example\n * import * as AbsintheSocket from \"@absinthe/socket\";\n *\n * AbsintheSocket.unobserve(absintheSocket, notifier, observer);\n */\nconst unobserve = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any>,\n  observer: Observer<any>\n): AbsintheSocket => {\n  updateNotifiers(\n    absintheSocket,\n    notifierRefresh(notifierUnobserve(notifier, observer))\n  );\n\n  return absintheSocket;\n};\n\nexport default unobserve;\n"],"names":["find","notifiers","key","value","hasIn","createEventHandler","absintheSocket","request","args","notifier","notifierFind","createPushHandler","notifierPushHandler","map","handlePush","push","handler","receive","onSucceed","onError","onTimeout","getNotifier","handlerName","data","observer","getHandlerName","event","notify","observers","forEach","findIndex","remove","arrayRemove","updateNotifiers","updater","removeNotifiers","notifierRemove","errorMessage","notifierNotify","unsubscribe","channel","subscriptionId","cancel","operationType","notifyall","refresh","arrayReplace","notifyStart","onSubscriptionSucceed","updatedNotifier","notifierRefresh","abortRequest","error","Error","onSubscriptionResponse","response","errors","gqlErrorsToString","onQueryOrMutationResponse","queryOrMutationHandler","subcriptionHandler","send","requestToCompat","pushRequest","createChannelJoinHandler","notifierNotifyAll","joinChannel","join","channelJoinCreated","createConnectionCloseError","mutationOnConnectionClose","notifierOnConnectionClose","onConnectionClose","onSubscriptionData","payload","result","onMessage","shouldJoinChannel","length","onConnectionOpen","absintheChannelName","create","phoenixSocket","onOpen","onClose","observe","rest","notifierObserve","getOperationType","operation","undefined","connectOrJoinChannel","isConnected","connect","sendNew","notifierCreate","append","onResult","next","complete","toObservable","onStart","Observable","unobserve","indexOf","notifierUnobserve"],"mappings":"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"}