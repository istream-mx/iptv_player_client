{"version":3,"file":"observe.js","sources":["../../src/notifier/observe.js","../../src/notifier/findIndex.js","../../src/notifier/refresh.js","../../src/updateNotifiers.js","../../src/observe.js"],"sourcesContent":["// @flow\n\nimport type {Notifier, Observer} from \"../types\";\n\nconst observe = <Result>(\n  {observers, ...rest}: Notifier<Result>,\n  observer: Observer<Result>\n) => ({\n  ...rest,\n  observers: [...observers, observer]\n});\n\nexport default observe;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"../types\";\n\nconst findIndex = (notifiers: Array<Notifier<any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"../types\";\n\nconst refresh = (notifier: Notifier<any>) => (\n  notifiers: Array<Notifier<any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport type {AbsintheSocket, Notifier} from \"./types\";\n\ntype Notifiers = Array<Notifier<any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nimport notifierObserve from \"./notifier/observe\";\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, Notifier, Observer} from \"./types\";\n\n/**\n * Observes given notifier using the provided observer\n *\n * @example\n * import AbsintheSocket from \"@absinthe/socket\"\n *\n * const logEvent = eventName => (...args) => console.log(eventName, ...args);\n *\n * const updatedNotifier = AbsintheSocket.observe(absintheSocket, notifier, {\n *   onAbort: logEvent(\"abort\"),\n *   onError: logEvent(\"error\"),\n *   onStart: logEvent(\"open\"),\n *   onResult: logEvent(\"result\")\n * });\n */\nconst observe = <Result>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result>,\n  observer: Observer<Result>\n): AbsintheSocket =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRefresh(notifierObserve(notifier, observer))\n  );\n\nexport default observe;\n"],"names":["observe","observer","observers","rest","findIndex","notifiers","key","value","hasIn","refresh","notifier","arrayReplace","request","updateNotifiers","absintheSocket","updater","notifierRefresh","notifierObserve"],"mappings":"0hBAIMA,UAAU,WAEdC,oCADCC,IAAAA,UAAcC,+DAGZA,0CACYD,IAAWD,mCCHtBG,UAAY,SAACC,EAAiCC,EAAaC,uCAE/DF,EAAUD,UAAUI,sBAAOF,GAAMC,iCCA7BE,QAAU,SAACC,uCAA4B,SAC3CL,uCAEAM,mBACEP,UAAUC,EAAW,UAAWK,EAASE,UACxCF,GACDL,4CCREQ,gBAAkB,SACtBC,EACAC,yCAEeV,UAAYU,EAAQD,EAAeT,WAE3CS,6BCWHd,QAAU,SACdc,EACAJ,EACAT,qCAEAY,gBACEC,EACAE,QAAgBC,UAAgBP,EAAUT"}